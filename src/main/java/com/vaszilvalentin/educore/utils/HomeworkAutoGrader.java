package com.vaszilvalentin.educore.utils;

import com.vaszilvalentin.educore.data.HomeworkDatabase;
import com.vaszilvalentin.educore.homework.Homework;
import com.vaszilvalentin.educore.users.User;
import com.vaszilvalentin.educore.users.UserManager;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

public class HomeworkAutoGrader {

    private static final String AUTO_GRADE_MARKER = "AUTOGENERATED_GRADE";
    private static final String DEFAULT_GRADE = "1";

    /**
     * Automatically grades all overdue homework assignments across all classes.
     *
     * @return CompletableFuture that completes when grading is finished
     */
    public static CompletableFuture<Void> gradeAllOverdueHomework() {
        CompletableFuture<Void> future = new CompletableFuture<>();

        NetworkTimeChecker.getNetworkTimeAsync()
                .thenAccept(currentTime -> processOverdueHomework(currentTime, future))
                .exceptionally(ex -> {
                    future.completeExceptionally(ex);
                    return null;
                });

        return future;
    }

    private static void processOverdueHomework(LocalDateTime currentTime, CompletableFuture<Void> future) {
        try {
            List<Homework> allHomework = HomeworkDatabase.loadHomework();
            List<User> students = UserManager.getUsersByRole("student");

            List<Homework> overdueHomework = findOverdueHomework(allHomework, currentTime);
            gradeMissingSubmissions(overdueHomework, students);

            HomeworkDatabase.saveHomework(allHomework);
            future.complete(null);
        } catch (Exception e) {
            future.completeExceptionally(e);
        }
    }

    private static List<Homework> findOverdueHomework(List<Homework> homeworkList, LocalDateTime currentTime) {
        return homeworkList.stream()
                .filter(hw -> hw.getDeadline().isBefore(currentTime))
                .collect(Collectors.toList());
    }

    private static void gradeMissingSubmissions(List<Homework> homeworkList, List<User> students) {
        homeworkList.forEach(homework
                -> students.stream()
                        .filter(student -> shouldGradeStudent(homework, student))
                        .forEach(student -> addAutomaticGrade(homework, student))
        );
    }

    private static boolean shouldGradeStudent(Homework homework, User student) {
        return student.getClassId().equals(homework.getClassId())
                && !homework.hasSubmitted(student.getId());
    }

    private static void addAutomaticGrade(Homework homework, User student) {
        homework.addSubmission(
                student.getId(),
                new Homework.Submission(
                        AUTO_GRADE_MARKER,
                        DEFAULT_GRADE,
                        homework.getDeadline()
                )
        );
    }
}
