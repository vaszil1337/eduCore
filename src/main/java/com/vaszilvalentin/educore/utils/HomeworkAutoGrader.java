package com.vaszilvalentin.educore.utils;

import com.vaszilvalentin.educore.data.HomeworkDatabase;
import com.vaszilvalentin.educore.homework.Homework;
import com.vaszilvalentin.educore.users.User;
import com.vaszilvalentin.educore.users.UserManager;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

/**
 * This utility class is responsible for automatically grading overdue homework assignments.
 * It checks for overdue assignments and applies a default grade to missing submissions.
 */
public class HomeworkAutoGrader {

    // Constant marker to identify auto-generated grades
    private static final String AUTO_GRADE_MARKER = "AUTOGENERATED_GRADE";

    // Default grade to be assigned to overdue homework submissions
    private static final String DEFAULT_GRADE = "1";

    /**
     * Initiates the process of grading all overdue homework assignments for all students.
     * This method is asynchronous and returns a CompletableFuture to signal when the operation is complete.
     *
     * @return CompletableFuture that completes when all overdue homework is graded
     */
    public static CompletableFuture<Void> gradeAllOverdueHomework() {
        // Create a CompletableFuture to track the process
        CompletableFuture<Void> future = new CompletableFuture<>();

        // Retrieve the current time from the network asynchronously
        NetworkTimeChecker.getNetworkTimeAsync()
                .thenAccept(currentTime -> processOverdueHomework(currentTime, future))
                .exceptionally(ex -> {
                    // If an exception occurs, complete the future exceptionally
                    future.completeExceptionally(ex);
                    return null;
                });

        // Return the future that will complete once grading is finished
        return future;
    }

    /**
     * Processes the overdue homework assignments, grades them, and saves the updated homework list.
     *
     * @param currentTime the current time, used to check overdue assignments
     * @param future the CompletableFuture that tracks the overall process
     */
    private static void processOverdueHomework(LocalDateTime currentTime, CompletableFuture<Void> future) {
        try {
            // Load all homework assignments from the database
            List<Homework> allHomework = HomeworkDatabase.loadHomework();

            // Retrieve the list of all students
            List<User> students = UserManager.getUsersByRole("student");

            // Filter out the overdue homework assignments
            List<Homework> overdueHomework = findOverdueHomework(allHomework, currentTime);

            // Grade the overdue homework that has missing submissions
            gradeMissingSubmissions(overdueHomework, students);

            // Save the updated homework list back to the database
            HomeworkDatabase.saveHomework(allHomework);

            // Complete the future successfully once all tasks are done
            future.complete(null);
        } catch (Exception e) {
            // If an error occurs during the process, complete the future exceptionally
            future.completeExceptionally(e);
        }
    }

    /**
     * Filters the list of homework assignments to find those that are overdue.
     *
     * @param homeworkList the list of all homework assignments
     * @param currentTime the current time used to compare against homework deadlines
     * @return a list of overdue homework assignments
     */
    private static List<Homework> findOverdueHomework(List<Homework> homeworkList, LocalDateTime currentTime) {
        // Filter homework assignments where the deadline is before the current time
        return homeworkList.stream()
                .filter(hw -> hw.getDeadline().isBefore(currentTime))
                .collect(Collectors.toList());
    }

    /**
     * Grades all missing homework submissions for the overdue homework assignments.
     *
     * @param homeworkList the list of overdue homework assignments
     * @param students the list of students who need to be graded
     */
    private static void gradeMissingSubmissions(List<Homework> homeworkList, List<User> students) {
        // For each homework assignment, check each student
        homeworkList.forEach(homework
                -> students.stream()
                        // Filter students who are in the same class and have not submitted the homework
                        .filter(student -> shouldGradeStudent(homework, student))
                        .forEach(student -> addAutomaticGrade(homework, student)) // Add automatic grade to missing submissions
        );
    }

    /**
     * Determines if a student should be graded for a specific homework assignment.
     * A student is eligible if they are in the same class and have not yet submitted the homework.
     *
     * @param homework the homework assignment to check
     * @param student the student to check
     * @return true if the student should be graded, false otherwise
     */
    private static boolean shouldGradeStudent(Homework homework, User student) {
        // Ensure the student is in the same class as the homework, and has not yet submitted it
        return student.getClassId().equals(homework.getClassId())
                && !homework.hasSubmitted(student.getId());
    }

    /**
     * Adds an automatic grade for a student who has missed a homework submission.
     * The grade is set to the default grade value.
     *
     * @param homework the homework assignment
     * @param student the student who missed the submission
     */
    private static void addAutomaticGrade(Homework homework, User student) {
        // Add a new submission with an auto-generated grade for the student
        homework.addSubmission(
                student.getId(),
                new Homework.Submission(
                        AUTO_GRADE_MARKER,  // Identifier for auto-generated grade
                        DEFAULT_GRADE,      // Default grade to assign
                        homework.getDeadline() // Set the deadline as the submission time
                )
        );
    }
}